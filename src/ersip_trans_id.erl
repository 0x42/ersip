%%
%% Copyright (c) 2017, 2018 Dmitry Poroh
%% All rights reserved.
%% Distributed under the terms of the MIT License. See the LICENSE file.
%%
%% Generating unique transaction identifier.
%%

-module(ersip_trans_id).

-export([ make_uas/1 ]).

%%%===================================================================
%%% Types
%%%===================================================================

-record(tid_rfc3261, { branch_id :: ersip_branch:branch_key(),
                       sent_by   :: ersip_hdr_via:sent_by(),
                       method    :: ersip_method:method()
                     }).
-record(tid_rfc2543,
        { callid      :: ersip_hdr_callid:callid(),
          ruri        :: ersip_uri:uri(),
          from_tag    :: ersip_hdr_fromto:tag_key() | undefined,
          to_tag      :: ersip_hdr_fromto:tag_key() | undefined,
          cseq        :: ersip_hdr_cseq:cseq(),
          topmost_via :: ersip_hdr_via:via()
        }).
-type tid_rfc3261() :: #tid_rfc3261{}.
-type tid_rfc2543() :: #tid_rfc2543{}.
-type transaction_id() :: tid_rfc3261()
                        | tid_rfc2543().

%%%===================================================================
%%% API
%%%===================================================================

-spec make_uas(ersip_sipmsg:sipmsg()) -> transaction_id().
make_uas(Message) ->
    %% The branch parameter in the topmost Via header field of the
    %% request is examined.  If it is present and begins with the magic
    %% cookie "z9hG4bK", the request was generated by a client
    %% transaction compliant to this specification.
    TopmostVia = ersip_sipmsg:get(topmost_via, Message),
    Branch = ersip_hdr_via:branch(TopmostVia),
    case is_rfc3261(Branch) of
        true ->
            make_rfc3261_tid(TopmostVia, Message);
        false ->
            make_rfc2543_tid(TopmostVia, Message)
    end.

%%%===================================================================
%%% Internal implementation
%%%===================================================================

-spec make_rfc3261_tid(ersip_hdr_via:via(), ersip_sipmsg:sipmsg()) -> tid_rfc3261().
make_rfc3261_tid(TopmostVia, Message) ->
    %% The request matches a transaction if:
    %% 
    %%    1. the branch parameter in the request is equal to the one in the
    %%       top Via header field of the request that created the
    %%       transaction, and
    %% 
    %%    2. the sent-by value in the top Via of the request is equal to the
    %%       one in the request that created the transaction, and
    %% 
    %%    3. the method of the request matches the one that created the
    %%       transaction, except for ACK, where the method of the request
    %%       that created the transaction is INVITE.
    Branch    = ersip_hdr_via:branch(TopmostVia),
    SentByKey = ersip_hdr_via:sent_by_key(TopmostVia),
    Method    = ersip_sipmsg:method(Message),
    EffMethod = 
        case Method of
            { method, <<"ACK">> } -> ersip_method:make(<<"INVITE">>);
            M -> M
        end,
    #tid_rfc3261{ method  = EffMethod,
                  sent_by = SentByKey,
                  branch_id = ersip_branch:make_key(Branch) }.

-spec make_rfc2543_tid(ersip_hdr_via:via(), ersip_sipmsg:sipmsg()) -> tid_rfc2543().
make_rfc2543_tid(TopmostVia, Message) ->
    Method = ersip_sipmsg:method(Message),
    RURI   = ersip_sipmsg:ruri(Message),
    CallId = ersip_sipmsg:get(callid, Message),
    From   = ersip_sipmsg:get(from, Message),
    To     = ersip_sipmsg:get(to,   Message),
    CSeq   = ersip_sipmsg:get(cseq, Message),
    case Method of
        { method, <<"INVITE">> } ->
            %% The INVITE request matches a transaction if the
            %% Request-URI, To tag, From tag, Call-ID, CSeq, and top
            %% Via header field match those of the INVITE request
            %% which created the transaction.  In this case, the
            %% INVITE is a retransmission of the original one that
            %% created the transaction.
            #tid_rfc2543{ callid      = ersip_hdr_callid:make_key(CallId),
                          ruri        = ersip_uri:make_key(RURI),
                          from_tag    = ersip_hdr_fromto:tag_key(From),
                          to_tag      = ersip_hdr_fromto:tag_key(To),
                          cseq        = ersip_hdr_cseq:make_key(CSeq),
                          topmost_via = ersip_hdr_via:make_key(TopmostVia)
                        };
        { method,  <<"ACK">> } ->
            %% The ACK request matches a transaction if the Request-
            %% URI, From tag, Call-ID, CSeq number (not the method), and top Via
            %% header field match those of the INVITE request which created the
            %% transaction, and the To tag of the ACK matches the To tag of the
            %% response sent by the server transaction.
            INVITE = ersip_method:make(<<"INVITE">>),
            ACKCSeq = ersip_hdr_cseq:make(INVITE, ersip_hdr_cseq:number(CSeq)),
            #tid_rfc2543{ callid      = ersip_hdr_callid:make_key(CallId),
                          ruri        = ersip_uri:make_key(RURI),
                          from_tag    = ersip_hdr_fromto:tag_key(From),
                          to_tag      = undefined,
                          cseq        = ACKCSeq,
                          topmost_via = ersip_hdr_via:make_key(TopmostVia)
                        };
        _ ->
            %% For all other request methods, a request is matched to
            %% a transaction if the Request-URI, To tag, From tag,
            %% Call-ID, CSeq (including the method), and top Via
            %% header field match those of the request that created
            %% the transaction.  Matching is done based on the
            %% matching rules defined for each of those header fields.
            #tid_rfc2543{ callid      = ersip_hdr_callid:make_key(CallId),
                          ruri        = ersip_uri:make_key(RURI),
                          from_tag    = ersip_hdr_fromto:tag_key(From),
                          to_tag      = ersip_hdr_fromto:tag_key(To),
                          cseq        = ersip_hdr_cseq:make_key(CSeq),
                          topmost_via = ersip_hdr_via:make_key(TopmostVia)
                        }
    end.    

%% If the branch parameter in the top Via header field is
%% not present, or does not contain the magic cookie, the
%% following procedures are used.  These exist to handle
%% backwards compatibility with RFC 2543 compliant
%% implementations.
is_rfc3261(undefined) ->
    false;
is_rfc3261(Branch) ->
    ersip_branch:is_rfc3261(Branch).
